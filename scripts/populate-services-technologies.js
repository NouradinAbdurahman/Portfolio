const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function populateServicesTechnologies() {
  try {
    console.log('üîß Populating Services with Technologies...');

    // Define the services with their technologies based on the images
    const servicesWithTechnologies = [
      {
        id: 'webDevelopment',
        title: {
          en: 'Web Development',
          ar: 'ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàŸäÿ®',
          tr: 'Web Geli≈ütirme',
          it: 'Sviluppo Web',
          fr: 'D√©veloppement Web',
          de: 'Web-Entwicklung'
        },
        description: {
          en: 'Modern web applications using React, Next.js, and Flutter. Responsive design with optimal performance.',
          ar: 'ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ŸàŸäÿ® ÿ≠ÿØŸäÿ´ÿ© ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ React Ÿà Next.js Ÿà Flutter. ÿ™ÿµŸÖŸäŸÖ ŸÖÿ™ÿ¨ÿßŸàÿ® ŸÖÿπ ÿ£ÿØÿßÿ° ŸÖÿ´ÿßŸÑŸä.',
          tr: 'React, Next.js ve Flutter kullanarak modern web uygulamalarƒ±. Optimal performansla duyarlƒ± tasarƒ±m.',
          it: 'Applicazioni web moderne utilizzando React, Next.js e Flutter. Design responsive con prestazioni ottimali.',
          fr: 'Applications web modernes utilisant React, Next.js et Flutter. Design responsive avec des performances optimales.',
          de: 'Moderne Webanwendungen mit React, Next.js und Flutter. Responsive Design mit optimaler Leistung.'
        },
        icon: 'Code',
        technologies: ['React', 'Next.js', 'TypeScript', 'Flutter', 'Tailwind CSS']
      },
      {
        id: 'dataEngineering',
        title: {
          en: 'Data Engineering',
          ar: 'ŸáŸÜÿØÿ≥ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™',
          tr: 'Veri M√ºhendisliƒüi',
          it: 'Ingegneria dei Dati',
          fr: 'Ing√©nierie des Donn√©es',
          de: 'Datenengineering'
        },
        description: {
          en: 'ETL pipeline development, SQL optimization, and cloud-based data processing solutions.',
          ar: 'ÿ™ÿ∑ŸàŸäÿ± ÿÆÿ∑Ÿàÿ∑ ÿ£ŸÜÿßÿ®Ÿäÿ® ETL Ÿàÿ™ÿ≠ÿ≥ŸäŸÜ SQL Ÿàÿ≠ŸÑŸàŸÑ ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ŸÜÿØÿ© ÿ•ŸÑŸâ ÿßŸÑÿ≥ÿ≠ÿßÿ®ÿ©.',
          tr: 'ETL pipeline geli≈ütirme, SQL optimizasyonu ve bulut tabanlƒ± veri i≈üleme √ß√∂z√ºmleri.',
          it: 'Sviluppo di pipeline ETL, ottimizzazione SQL e soluzioni di elaborazione dati basate su cloud.',
          fr: 'D√©veloppement de pipelines ETL, optimisation SQL et solutions de traitement de donn√©es bas√©es sur le cloud.',
          de: 'ETL-Pipeline-Entwicklung, SQL-Optimierung und cloudbasierte Datenverarbeitungsl√∂sungen.'
        },
        icon: 'Database',
        technologies: ['Python', 'SQL', 'ETL', 'PostgreSQL', 'AWS']
      },
      {
        id: 'mobileDevelopment',
        title: {
          en: 'Mobile Development',
          ar: 'ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖŸàŸÑÿ©',
          tr: 'Mobil Geli≈ütirme',
          it: 'Sviluppo Mobile',
          fr: 'D√©veloppement Mobile',
          de: 'Mobile Entwicklung'
        },
        description: {
          en: 'Cross-platform mobile applications with Flutter and React Native. Native performance with shared codebase.',
          ar: 'ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ŸÖÿ≠ŸÖŸàŸÑÿ© ŸÖÿ™ÿπÿØÿØÿ© ÿßŸÑŸÖŸÜÿµÿßÿ™ ŸÖÿπ Flutter Ÿà React Native. ÿ£ÿØÿßÿ° ÿ£ÿµŸÑŸä ŸÖÿπ ŸÇÿßÿπÿØÿ© ŸÉŸàÿØ ŸÖÿ¥ÿ™ÿ±ŸÉÿ©.',
          tr: 'Flutter ve React Native ile √ßoklu platform mobil uygulamalarƒ±. Payla≈üƒ±lan kod tabanƒ± ile yerel performans.',
          it: 'Applicazioni mobili multipiattaforma con Flutter e React Native. Prestazioni native con codebase condivisa.',
          fr: 'Applications mobiles multiplateformes avec Flutter et React Native. Performances natives avec codebase partag√©e.',
          de: 'Plattform√ºbergreifende mobile Anwendungen mit Flutter und React Native. Native Leistung mit gemeinsamer Codebasis.'
        },
        icon: 'Smartphone',
        technologies: ['Flutter', 'React Native', 'Dart', 'JavaScript', 'Firebase']
      },
      {
        id: 'cloudSolutions',
        title: {
          en: 'Cloud Solutions',
          ar: 'ÿ≠ŸÑŸàŸÑ ÿßŸÑÿ≥ÿ≠ÿßÿ®ÿ©',
          tr: 'Bulut √á√∂z√ºmleri',
          it: 'Soluzioni Cloud',
          fr: 'Solutions Cloud',
          de: 'Cloud-L√∂sungen'
        },
        description: {
          en: 'Scalable cloud infrastructure, deployment automation, and DevOps practices for modern applications.',
          ar: 'ÿ®ŸÜŸäÿ© ÿ™ÿ≠ÿ™Ÿäÿ© ÿ≥ÿ≠ÿßÿ®Ÿäÿ© ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ™Ÿàÿ≥ÿπ Ÿàÿ£ÿ™ŸÖÿ™ÿ© ÿßŸÑŸÜÿ¥ÿ± ŸàŸÖŸÖÿßÿ±ÿ≥ÿßÿ™ DevOps ŸÑŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿßŸÑÿ≠ÿØŸäÿ´ÿ©.',
          tr: 'Modern uygulamalar i√ßin √∂l√ßeklenebilir bulut altyapƒ±sƒ±, daƒüƒ±tƒ±m otomasyonu ve DevOps uygulamalarƒ±.',
          it: 'Infrastruttura cloud scalabile, automazione del deployment e pratiche DevOps per applicazioni moderne.',
          fr: 'Infrastructure cloud √©volutive, automatisation du d√©ploiement et pratiques DevOps pour applications modernes.',
          de: 'Skalierbare Cloud-Infrastruktur, Deployment-Automatisierung und DevOps-Praktiken f√ºr moderne Anwendungen.'
        },
        icon: 'Cloud',
        technologies: ['AWS', 'Docker', 'Kubernetes', 'CI/CD', 'Terraform']
      }
    ];

    // Update the services.items field with the new structure
    const servicesTranslations = Object.fromEntries(
      ['en', 'ar', 'tr', 'it', 'fr', 'de'].map(locale => [
        locale,
        JSON.stringify(servicesWithTechnologies)
      ])
    );

    const { error } = await supabase
      .from('translations')
      .upsert({
        key: 'services.items',
        ...servicesTranslations,
        updated_at: new Date().toISOString()
      }, { onConflict: 'key' });

    if (error) {
      console.error('‚ùå Error updating services.items:', error);
    } else {
      console.log('‚úÖ Updated services.items successfully');
    }

    console.log('üéâ Services with Technologies populated successfully!');

  } catch (error) {
    console.error('‚ùå Unexpected error:', error);
  }
}

// Run the script
populateServicesTechnologies();
